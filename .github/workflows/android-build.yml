name: Build APK

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ANDROID_NDK: /home/runner/android-ndk-r25b
      ANDROID_NDK_HOME: /home/runner/android-ndk-r25b
      ANDROID_NDK_ROOT: /home/runner/android-ndk-r25b
      ANDROIDNDK: /home/runner/android-ndk-r25b
      ANDROID_SDK_ROOT: /home/runner/android-sdk
      ANDROID_HOME: /home/runner/android-sdk
      ANDROIDAPI: "30"
      ANDROIDMINAPI: "21"
      PATH: /home/runner/android-sdk/cmdline-tools/latest/bin:/home/runner/android-sdk/platform-tools:/usr/bin:/bin:/usr/lib/jvm/java-17-openjdk-amd64/bin:/home/runner/.local/bin:$PATH

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          set -ex
          python -m pip install --upgrade pip
          pip install buildozer==1.5.0 cython

      - name: Remove incorrect NDK versions
        run: |
          set -ex
          rm -rf ~/.buildozer/android/platform/android-ndk-*
          rm -rf /usr/local/lib/android/sdk/ndk/* || true

      - name: Download NDK
        run: |
          set -ex
          NDK_DIR="/home/runner/.buildozer/android/platform"
          NDK_ZIP="$NDK_DIR/android-ndk-r25b-linux.zip"
          mkdir -p $NDK_DIR
          if [ ! -f $NDK_ZIP ]; then
            wget https://dl.google.com/android/repository/android-ndk-r25b-linux.zip -O $NDK_ZIP
          fi
          unzip -q $NDK_ZIP -d $NDK_DIR
          mv $NDK_DIR/android-ndk-r25b $NDK_DIR/../android-ndk-r25b

      - name: Install Android SDK tools and build-tools
        run: |
          set -ex
          sudo apt-get update
          sudo apt-get install -y unzip zip tar openjdk-17-jdk wget

          mkdir -p $ANDROID_HOME/cmdline-tools
          cd $ANDROID_HOME/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip -O tools.zip
          unzip tools.zip -d temp
          mkdir -p latest
          mv temp/cmdline-tools/* latest/
          rm -rf temp tools.zip

          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true

          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" "platforms;android-30" "build-tools;30.0.3"

      - name: Link SDK for Buildozer compatibility
        run: |
          set -ex
          BUILD_SDK_DIR="/home/runner/.buildozer/android/platform/android-sdk"
          mkdir -p "$BUILD_SDK_DIR/tools/bin"
          ln -sfn /home/runner/android-sdk/cmdline-tools/latest/bin/sdkmanager "$BUILD_SDK_DIR/tools/bin/sdkmanager"
          ln -sfn /home/runner/android-sdk "$BUILD_SDK_DIR"

      - name: Set Buildozer NDK path
        run: |
          set -ex
          if [ ! -f buildozer.spec ]; then
            buildozer init
          fi
          sed -i '/^android.ndk_path/d' buildozer.spec
          echo "android.ndk_path = /home/runner/android-ndk-r25b" >> buildozer.spec

      - name: Fix AIDL location with fallback
        run: |
          set -ex

          AIDL_SRC="/home/runner/android-sdk/build-tools/30.0.3/aidl"
          AIDL_DEST="/home/runner/.buildozer/android/platform/android-sdk/build-tools/30.0.3/aidl"
          AIDL_DIR="$(dirname "$AIDL_DEST")"
          mkdir -p "$AIDL_DIR"

          if [ -f "$AIDL_SRC" ]; then
            echo "Found AIDL in global SDK. Copying to Buildozer path..."
            cp "$AIDL_SRC" "$AIDL_DEST"
            chmod +x "$AIDL_DEST"
          fi

          echo "Verifying AIDL executable..."
          if ! "$AIDL_DEST" --help > /dev/null 2>&1; then
            echo "AIDL is not working. Downloading fallback version..."
            wget https://dl.google.com/android/repository/build-tools_r29.0.2-linux.zip -O build-tools.zip
            unzip -o -j build-tools.zip 'android-*/aidl' -d "$AIDL_DIR"
            chmod +x "$AIDL_DEST"
            rm build-tools.zip
          else
            echo "AIDL is working as expected."
          fi

      - name: Install 32-bit libraries
        run: |
          set -ex
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y \
            libc6:i386 \
            libncurses6:i386 \
            libstdc++6:i386 \
            zlib1g:i386 \
            lib32z1 \
            lib32ncurses6 \
            lib32stdc++6 \
            libgcc-s1:i386 \
            lib32gcc-s1 \
            libc6-i386 \
            libx11-6:i386 \
            libxext6:i386 \
            libxrender1:i386 \
            libglib2.0-0:i386 \
            libsm6:i386 \
            libice6:i386 \
            libxtst6:i386 \
            libxi6:i386 \
            libfontconfig1:i386 \
            libdbus-1-3:i386 \
            libxrandr2:i386 \
            libasound2:i386 \
            libcurl4:i386 \
            libpulse0:i386 \
            libxinerama1:i386

      - name: Diagnose and patch aidl execution
        run: |
          set -ex
          AIDL_BIN="/home/runner/.buildozer/android/platform/android-sdk/build-tools/30.0.3/aidl"
          echo "Running file check on AIDL..."
          file "$AIDL_BIN"

          echo "Checking for missing dependencies..."
          ldd "$AIDL_BIN" || echo "ldd check failed, likely missing libs"

          echo "Testing AIDL execution..."
          if ! "$AIDL_BIN" --help > /dev/null 2>&1; then
            echo "AIDL failed â€” retrying with LD_LIBRARY_PATH..."
            export LD_LIBRARY_PATH="/lib/i386-linux-gnu:/usr/lib/i386-linux-gnu:$LD_LIBRARY_PATH"
            echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
            "$AIDL_BIN" --help || {
              echo "Even with LD_LIBRARY_PATH, AIDL fails"
              exit 1
            }
          else
            echo "AIDL executed correctly"
          fi

      - name: Build APK
        run: |
          set -ex
          buildozer -v android debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: kivy-apk
          path: bin/*.apk
