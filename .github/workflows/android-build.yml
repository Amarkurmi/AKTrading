name: Build Android APK

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            ccache \
            git \
            libffi-dev \
            libssl-dev \
            libsqlite3-dev \
            libjpeg-dev \
            zlib1g-dev \
            libncurses5-dev \
            libtool \
            pkg-config \
            automake \
            unzip \
            zip \
            openjdk-17-jdk \
            curl \
            wget

      - name: Install Android SDK and Build Tools
        run: |
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          
          # Download and unzip SDK command-line tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $ANDROID_SDK_ROOT/cmdline-tools
          mv $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools $ANDROID_SDK_ROOT/cmdline-tools/latest

          # Set environment variables for Android SDK
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/build-tools" >> $GITHUB_PATH

          # Accept SDK licenses without waiting for input
          echo "Accepting SDK licenses..."
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses

          # Install platform-tools, build-tools, and required SDK components
          echo "Installing SDK components..."
          $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager \
            --no_https \
            "platform-tools" \
            "platforms;android-30" \
            "build-tools;30.0.3" # Specifying a stable build-tools version

          # Ensure installation of build tools
          echo "Listing build-tools folder..."
          ls -la $ANDROID_SDK_ROOT/build-tools || true

          # Ensure AIDL exists in build-tools directory
          if ! find $ANDROID_SDK_ROOT/build-tools -name "aidl" -print; then
            echo "❌ AIDL not found in build-tools directory. Reinstalling build-tools..."
            $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;29.0.3"
          else
            echo "✅ AIDL found in build-tools directory."
          fi

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install Cython virtualenv
          pip install buildozer

      - name: Create buildozer.spec if missing
        run: |
          if [ ! -f buildozer.spec ]; then
            buildozer init
          fi

      - name: Clean buildozer environment (force rebuild)
        run: |
          rm -rf .buildozer
          rm -rf ~/.buildozer
          buildozer android clean || true  # tolerate errors here

      - name: Debugging - Check AIDL Installation
        run: |
          echo "Listing build-tools folder..."
          ls -la $ANDROID_SDK_ROOT/build-tools || true

          # Check if the aidl tool exists
          if ! which aidl; then
            echo "❌ AIDL NOT FOUND. Attempting to locate aidl..."
            find $ANDROID_SDK_ROOT/build-tools -name "aidl" -print || true
          else
            echo "✅ AIDL found at $(which aidl)"
          fi

      - name: Build APK
        run: |
          buildozer android debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4.6
        with:
          name: kivy-app-apk
          path: bin/*.apk
