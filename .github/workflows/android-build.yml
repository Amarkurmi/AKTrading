name: Build APK

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ANDROID_NDK: /home/runner/android-ndk-r25b
      ANDROID_NDK_HOME: /home/runner/android-ndk-r25b
      ANDROID_NDK_ROOT: /home/runner/android-ndk-r25b
      ANDROIDNDK: /home/runner/android-ndk-r25b
      ANDROID_SDK_ROOT: /home/runner/android-sdk
      ANDROID_HOME: /home/runner/android-sdk
      ANDROIDAPI: "30"
      ANDROIDMINAPI: "21"
      PATH: /home/runner/android-sdk/cmdline-tools/latest/bin:/home/runner/android-sdk/platform-tools:/usr/bin:/bin:/usr/lib/jvm/java-17-openjdk-amd64/bin:/home/runner/.local/bin:$PATH

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Buildozer
        uses: actions/cache@v3
        with:
          path: ~/.buildozer
          key: ${{ runner.os }}-buildozer-${{ hashFiles('**/buildozer.spec') }}
          restore-keys: ${{ runner.os }}-buildozer-

      - name: Cache Android SDK
        uses: actions/cache@v3
        with:
          path: /home/runner/android-sdk
          key: ${{ runner.os }}-android-sdk
          restore-keys: ${{ runner.os }}-android-sdk

      - name: Cache Android NDK
        uses: actions/cache@v3
        with:
          path: /home/runner/android-ndk-r25b
          key: ${{ runner.os }}-android-ndk-r25b
          restore-keys: ${{ runner.os }}-android-ndk

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          set -ex
          python -m pip install --upgrade pip
          pip install buildozer==1.5.0 cython

      - name: Remove incorrect NDK versions
        run: |
          set -ex
          rm -rf ~/.buildozer/android/platform/android-ndk-*
          rm -rf /usr/local/lib/android/sdk/ndk/* || true

      - name: Prepare directories and download NDK
        run: |
          set -ex
          NDK_DIR="/home/runner/.buildozer/android/platform"
          NDK_ZIP="$NDK_DIR/android-ndk-r25b-linux.zip"
          mkdir -p $NDK_DIR
          
          if [ ! -f $NDK_ZIP ]; then
            wget https://dl.google.com/android/repository/android-ndk-r25b-linux.zip -O $NDK_ZIP
          fi

          unzip -q $NDK_ZIP -d $NDK_DIR
          mv $NDK_DIR/android-ndk-r25b $NDK_DIR/../android-ndk-r25b

      - name: Install Android SDK tools and build-tools
        run: |
          set -ex
          sudo apt-get update
          sudo apt-get install -y unzip zip tar openjdk-17-jdk wget
          mkdir -p $ANDROID_HOME/cmdline-tools
          cd $ANDROID_HOME/cmdline-tools
          
          wget https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip -O tools.zip
          unzip tools.zip -d temp
          rm tools.zip
          mkdir -p latest
          mv temp/cmdline-tools/* latest/
          rm -rf temp

          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true

          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" "platforms;android-30" "build-tools;30.0.3"

          mkdir -p ~/.buildozer/android/platform/
          ln -sfn /home/runner/android-sdk ~/.buildozer/android/platform/android-sdk

      - name: Set Buildozer NDK path
        run: |
          set -ex
          if [ ! -f buildozer.spec ]; then
            buildozer init
          fi
          sed -i '/^android.ndk_path/d' buildozer.spec
          echo "android.ndk_path = /home/runner/android-ndk-r25b" >> buildozer.spec

      - name: Fix AIDL location
        run: |
          set -ex
          AIDL_SRC="/home/runner/android-sdk/build-tools/30.0.3/aidl"
          AIDL_DEST="/home/runner/.buildozer/android/platform/android-sdk/build-tools/30.0.3/aidl"
          mkdir -p $(dirname "$AIDL_DEST")
          if [ -f "$AIDL_SRC" ]; then
            if [ "$AIDL_SRC" != "$AIDL_DEST" ]; then
              cp "$AIDL_SRC" "$AIDL_DEST"
              chmod +x "$AIDL_DEST"
            else
              echo "Source and destination AIDL are the same, skipping copy."
            fi
          else
            echo "AIDL not found. Attempting fix..."
            wget https://dl.google.com/android/repository/build-tools_r29.0.2-linux.zip -O build-tools.zip
            unzip -o -j build-tools.zip 'android-*/aidl' -d $(dirname "$AIDL_DEST")
            chmod +x "$AIDL_DEST"
            rm build-tools.zip
          fi

      - name: Ensure 32-bit libraries are installed
        run: |
          set -ex
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y libc6:i386 libncurses6:i386 libstdc++6:i386 zlib1g:i386 \
                                  lib32z1 lib32ncurses6 lib32stdc++6 libgcc-s1:i386 lib32gcc-s1 \
                                  libc6-i386

      - name: Diagnose AIDL
        run: |
          set -ex
          file /home/runner/.buildozer/android/platform/android-sdk/build-tools/30.0.3/aidl
          ldd /home/runner/.buildozer/android/platform/android-sdk/build-tools/30.0.3/aidl || true

      - name: Build APK
        run: |
          set -ex
          buildozer -v android debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4.6
        with:
          name: kivy-apk
          path: bin/*.apk

      - name: Optional cleanup
        if: always()
        run: |
          rm -rf /home/runner/android-sdk /home/runner/android-ndk-r25b
